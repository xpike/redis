<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XPike.Redis</name>
    </assembly>
    <members>
        <member name="T:XPike.Redis.IDependencyCollectionExtensions">
            <summary>
            Extension method to register xPike Redis dependencies in an IoC container.
            </summary>
        </member>
        <member name="M:XPike.Redis.IDependencyCollectionExtensions.AddXPikeRedis(XPike.IoC.IDependencyCollection)">
            <summary>
            Adds xPike Redis dependencies to an IoC container.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:XPike.Redis.IRedisConnection">
            <summary>
            Encapsulates and manages an actual connection to Redis.
            This is a parallel to the IConnectionMultiplexer in StackExchange.Redis.
            </summary>
        </member>
        <member name="P:XPike.Redis.IRedisConnection.ConnectionName">
            <summary>
            The name of the connection in the application configuration.
            </summary>
        </member>
        <member name="M:XPike.Redis.IRedisConnection.ConnectAsync">
            <summary>
            Establishes a connection to the Redis server/cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XPike.Redis.IRedisConnection.GetConnectionMultiplexerAsync">
            <summary>
            Returns the Connection Multiplexer for the established connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XPike.Redis.IRedisConnection.GetDatabaseAsync">
            <summary>
            Gets the Database (Cache) from the Connection Multiplexer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XPike.Redis.IRedisConnection.GetSubscriberAsync">
            <summary>
            Gets a Subscriber (for pub/sub - it is also used to publish) from the Connection Multiplexer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XPike.Redis.IRedisConnectionProvider">
            <summary>
            Manages a collection of Redis Connections, isolated by connection name, to different servers/clusters.
            </summary>
        </member>
        <member name="M:XPike.Redis.IRedisConnectionProvider.GetConnectionAsync(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets and/or establishes a connection using the specified connection name.
            Configuration values are loaded from application configuration.
            
            If no configuration for the specified connection name is found, the default connection will be used.
            If no default configuration is found, an InvalidOperationException will be thrown.
            </summary>
            <param name="connectionName">The name of the connection to use when loading from application configuration.</param>
            <param name="timeout">An optional timeout.  By default, StackExchange.Redis uses a 5-second timeout when creating a connection.</param>
            <param name="ct">An optional Cancellation Token to abort the connection.</param>
            <returns></returns>
        </member>
        <member name="T:XPike.Redis.Package">
            <summary>
            xPike Caching Dependency Package
            </summary>
        </member>
        <member name="M:XPike.Redis.Package.RegisterPackage(XPike.IoC.IDependencyCollection)">
            <summary>
            Registers xPike Caching dependencies with the Dependency Collection.
            </summary>
            <param name="dependencyCollection">The IDependencyCollection to register with.</param>
        </member>
        <member name="T:XPike.Redis.RedisConfig">
            <summary>
            Configuration for xPike Redis.
            </summary>
        </member>
        <member name="P:XPike.Redis.RedisConfig.Connections">
            <summary>
            The set of configured connections.
            </summary>
        </member>
        <member name="T:XPike.Redis.RedisConnection">
            <inheritdoc cref="T:XPike.Redis.IRedisConnection" />
            <summary>
            Establishes connections with Redis servers/clusters using the StackExchange.Redis library.
            </summary>
        </member>
        <member name="M:XPike.Redis.RedisConnection.#ctor(System.String,XPike.Configuration.IConfig{XPike.Redis.RedisConfig},XPike.Logging.ILog{XPike.Redis.RedisConnection})">
            <summary>
            Create a new Redis Connection.
            This does not establish the connection.
            
            This is intended to only be called from an IRedisConnectionProvider.
            </summary>
            <param name="connectionName">The name of the connection to load from configuration.</param>
            <param name="config">The RedisConfig to use.</param>
            <param name="logger">The ILogService to log exceptions and connection information to.</param>
        </member>
        <member name="T:XPike.Redis.RedisConnectionConfig">
            <summary>
            Configuration for an individual Redis server/cluster.
            </summary>
        </member>
        <member name="P:XPike.Redis.RedisConnectionConfig.ConnectionString">
            <summary>
            The Connection String to use.
            The format used by StackExchange.Redis (compatible with AWS and Azure) is expected.
            </summary>
        </member>
        <member name="P:XPike.Redis.RedisConnectionConfig.Enabled">
            <summary>
            Controls if this connection is enabled.
            If set to false, connections will not be established - the IRedisConnection will return only "false" or "null" from its methods.
            </summary>
        </member>
        <member name="T:XPike.Redis.RedisConnectionProvider">
             <inheritdoc cref="T:XPike.Redis.IRedisConnectionProvider" />
             <summary>
             Manages multiple connections to different Redis servers/clusters, isolated by connection name.
             Uses RedisConnection instances for its underlying implementation.
            
             This is intended to be consumed by an IRedisCacheConnectionProvider or IRedisEventBusConnectionProvider.
             This is intended to be a Dependency Injection managed Singleton.
             </summary>
        </member>
        <member name="M:XPike.Redis.RedisConnectionProvider.#ctor(XPike.Configuration.IConfig{XPike.Redis.RedisConfig},XPike.Logging.ILog{XPike.Redis.RedisConnectionProvider},XPike.Logging.ILog{XPike.Redis.RedisConnection})">
            <summary>
            Creates a new RedisConnectionProvider.
            </summary>
            <param name="config">The RedisConfig to use.</param>
            <param name="logService">The ILogService to provide to the </param>
        </member>
    </members>
</doc>
